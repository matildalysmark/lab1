@startuml
'https://plantuml.com/class-diagram

abstract class FlatbedCar
abstract class Workshop
interface Movable
interface Flatbed
interface Loadable


~interface Movable #red/white{
{method} ~ move(): void
{method} ~ turnLeft(): void
{method} ~ turnRight(): void
}
Movable <|.[#green].. Car

~interface Loadable #red/white {
{method} ~loadCarOnTransporter(Car): void
{method} ~unLoadCarFromTransporter(): void
}
Loadable <|.[#green]. Volvo240
Loadable <|.[#green]. Saab95


~interface Flatbed #red/white
{
{method} ~isUp(): boolean
{method} #raise(): void
{method} #lower(): void
}

Flatbed <|.[#green]. Ramp
Flatbed <|.[#green]. FlatbedWithAngle
Flatbed <--* FlatbedCar
Flatbed <--* CarTransporter

~class Car #LightGreen/LightGoldenRodYellow
{
{method} ~turnLeft(): void
{method} ~turnRight(): void
{method} ~brake(double): void
{method} ~gas(double): void
{method} ~move(): void
}
Car *--> Directions
Car <--* CarTransporter
Car <--* Workshop
Car <--* DrawPanel
Car <--* Model

Car <|-[#blue] FlatbedCar
Car <|-[#blue]- Saab95
Car <|-[#blue]- Volvo240


~class Saab95 #LightGreen/LightGoldenRodYellow{
{method} ~setTurboOn(): void
{method} ~setTurboOff(): void
}

~class Volvo240 #LightGreen/LightGoldenRodYellow{
}

~class Scania #LightGreen/LightGoldenRodYellow{
{method} ~setAngle(double): void
}

~class CarTransporter<T extends Car & Loadable> #LightGreen/LightGoldenRodYellow{
{method} ~loadCar(): void
{method} ~unLoadCar(): void
{method} ~move(): void
{method} ~turnLeft(): void
{method} ~turnRight(): void
}

~class Ramp #LightGreen/LightGoldenRodYellow{
}
Ramp <.. CarTransporter


~class FlatbedWithAngle #LightGreen/LightGoldenRodYellow{
{method} #setFlatbedAngle(double): void
}
FlatbedWithAngle <--*Scania

~class DrawPanel #lightcyan/lightyellow {
{method} + onModelChanged(Map<Car, Coords>): void
{method} #paintComponet(Graphics): void
}
DrawPanel <--* CarView
Model <.. DrawPanel

~class CarView #lightcyan/lightyellow  {
{method} - initComponents(String): void
}
Model <--* CarView


~class CarController #pink/LightGoldenRodYellow {
{method} - addListeners(): void
{method} ~actionPerformed(ActionEvent): void
}
Model <--* CarController
CarView <--* CarController

~class Workshop<T extends Car> #LightGreen/LightGoldenRodYellow
{
{method} ~handInCar(T): void
{method} ~takeBackCar(T): void
{method} ~checkIfCarInWorkshop(T): boolean
}


~class FlatbedCar<T extends Flatbed> #LightGreen/LightGoldenRodYellow
{
{method} ~ move(): void
{method} ~ turnLeft(): void
{method} ~ turnRight(): void
{method} ~ raiseFlatbed(): void
{method} ~ lowerFlatbed(): void
}
FlatbedCar <|-[#blue]- Scania
FlatbedCar <|-[#blue]- CarTransporter


scale 750 width
package pics <<cloud>> #blue/white {
}

~class Coords #LightGreen/LightGoldenRodYellow{
{method} ~ getX(): double
{method} ~ getY(): double
{method} ~ update(double, double): void
}
Coords <--* DrawPanel

~class Model #LightGreen/LightGoldenRodYellow{
{method} ~ addCar(Car): void
{method} ~ moveCars(): void
{method} ~ addListener(ModelListener): void
{method} - notifyListeners(): void
}

Workshop <--* Model
Volvo240 <--* Model
Coords <--* Model

~interface ModelListener #red/white{
}
ModelListener <|..[#green].. DrawPanel

~class Main #Purple/white {
}
CarController <.. Main
CarView <.. Main
Model <.. Main
Volvo240 <.. Main
Saab95 <.. Main
Scania <.. Main

~enum Directions #red/white {
NORTH
EAST
SOUTH
WEST
}
Directions <.. Model

@enduml